/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v1alpha1 "github.com/vidya-ranganathan/mcluster/pkg/apis/cumulonimbus.ai/v1alpha1"
	cumulonimbusaiv1alpha1 "github.com/vidya-ranganathan/mcluster/pkg/client/applyconfiguration/cumulonimbus.ai/v1alpha1"
	scheme "github.com/vidya-ranganathan/mcluster/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MclustersGetter has a method to return a MclusterInterface.
// A group's client should implement this interface.
type MclustersGetter interface {
	Mclusters(namespace string) MclusterInterface
}

// MclusterInterface has methods to work with Mcluster resources.
type MclusterInterface interface {
	Create(ctx context.Context, mcluster *v1alpha1.Mcluster, opts v1.CreateOptions) (*v1alpha1.Mcluster, error)
	Update(ctx context.Context, mcluster *v1alpha1.Mcluster, opts v1.UpdateOptions) (*v1alpha1.Mcluster, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.Mcluster, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.MclusterList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.Mcluster, err error)
	Apply(ctx context.Context, mcluster *cumulonimbusaiv1alpha1.MclusterApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.Mcluster, err error)
	MclusterExpansion
}

// mclusters implements MclusterInterface
type mclusters struct {
	client rest.Interface
	ns     string
}

// newMclusters returns a Mclusters
func newMclusters(c *CumulonimbusV1alpha1Client, namespace string) *mclusters {
	return &mclusters{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the mcluster, and returns the corresponding mcluster object, and an error if there is any.
func (c *mclusters) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.Mcluster, err error) {
	result = &v1alpha1.Mcluster{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("mclusters").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Mclusters that match those selectors.
func (c *mclusters) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.MclusterList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.MclusterList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("mclusters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested mclusters.
func (c *mclusters) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("mclusters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a mcluster and creates it.  Returns the server's representation of the mcluster, and an error, if there is any.
func (c *mclusters) Create(ctx context.Context, mcluster *v1alpha1.Mcluster, opts v1.CreateOptions) (result *v1alpha1.Mcluster, err error) {
	result = &v1alpha1.Mcluster{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("mclusters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(mcluster).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a mcluster and updates it. Returns the server's representation of the mcluster, and an error, if there is any.
func (c *mclusters) Update(ctx context.Context, mcluster *v1alpha1.Mcluster, opts v1.UpdateOptions) (result *v1alpha1.Mcluster, err error) {
	result = &v1alpha1.Mcluster{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("mclusters").
		Name(mcluster.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(mcluster).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the mcluster and deletes it. Returns an error if one occurs.
func (c *mclusters) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("mclusters").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *mclusters) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("mclusters").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched mcluster.
func (c *mclusters) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.Mcluster, err error) {
	result = &v1alpha1.Mcluster{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("mclusters").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied mcluster.
func (c *mclusters) Apply(ctx context.Context, mcluster *cumulonimbusaiv1alpha1.MclusterApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.Mcluster, err error) {
	if mcluster == nil {
		return nil, fmt.Errorf("mcluster provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(mcluster)
	if err != nil {
		return nil, err
	}
	name := mcluster.Name
	if name == nil {
		return nil, fmt.Errorf("mcluster.Name must be provided to Apply")
	}
	result = &v1alpha1.Mcluster{}
	err = c.client.Patch(types.ApplyPatchType).
		Namespace(c.ns).
		Resource("mclusters").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
